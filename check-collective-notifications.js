const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkCollectiveNotifications() {
  try {
    console.log('๐ ูุญุต ุงูุฅุดุนุงุฑุงุช ุงูุฌูุงุนูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    
    // Check for collective notifications
    const collectiveNotifications = await prisma.notification.findMany({
      where: {
        isCollectiveAdminNotification: true
      },
      orderBy: { createdAt: 'desc' },
      take: 10
    });
    
    console.log(`ุนุฏุฏ ุงูุฅุดุนุงุฑุงุช ุงูุฌูุงุนูุฉ: ${collectiveNotifications.length}`);
    
    if (collectiveNotifications.length > 0) {
      console.log('\n๐ ุงูุฅุดุนุงุฑุงุช ุงูุฌูุงุนูุฉ ุงูููุฌูุฏุฉ:');
      collectiveNotifications.forEach((n, i) => {
        console.log(`${i+1}. ุงูููุน: ${n.type}`);
        console.log(`   ุงููุนุฑู: ${n.id}`);
        console.log(`   ุงููุณุชุฎุฏู ุงูุฃุณุงุณู: ${n.userId}`);
        console.log(`   ุฅุดุนุงุฑ ุฌูุงุนู: ${n.isCollectiveAdminNotification}`);
        console.log(`   ูุนุฑูุงุช ุงูุฃุฏูู: ${JSON.stringify(n.adminUserIds)}`);
        console.log(`   ุงูุฑุณุงูุฉ: ${n.message.substring(0, 80)}...`);
        console.log(`   ุชุงุฑูุฎ ุงูุฅูุดุงุก: ${n.createdAt}`);
        console.log('   ---');
      });
    } else {
      console.log('โ ูุง ุชูุฌุฏ ุฅุดุนุงุฑุงุช ุฌูุงุนูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }
    
    // Check recent notifications
    console.log('\n๐ ุขุฎุฑ 10 ุฅุดุนุงุฑุงุช:');
    const recentNotifications = await prisma.notification.findMany({
      orderBy: { createdAt: 'desc' },
      take: 10
    });
    
    recentNotifications.forEach((n, i) => {
      console.log(`${i+1}. ${n.type} - ุฌูุงุนู: ${n.isCollectiveAdminNotification || false} - ุงููุณุชุฎุฏู: ${n.userId}`);
    });
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ูุญุต ุงูุฅุดุนุงุฑุงุช:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCollectiveNotifications();