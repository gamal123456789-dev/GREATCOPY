require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const { sendDatabaseNotification } = require('./services/databaseNotificationService');

const prisma = new PrismaClient();

async function checkYourOrder() {
  try {
    console.log('๐ ูุญุต ุทูุจู ุงูุฃุฎูุฑ...');
    console.log('============================================');
    
    // ุงูุจุญุซ ุนู ุฃุญุฏุซ ุทูุจ
    const recentOrder = await prisma.order.findFirst({
      orderBy: { date: 'desc' }
    });
    
    if (!recentOrder) {
      console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃู ุทูุจุงุช');
      return;
    }
    
    console.log('๐ฆ ุทูุจู ุงูุฃุฎูุฑ:');
    console.log('ุฑูู ุงูุทูุจ:', recentOrder.id);
    console.log('ุงูุงุณู:', recentOrder.customerName);
    console.log('ุงูุจุฑูุฏ ุงูุฅููุชุฑููู:', recentOrder.customerEmail);
    console.log('ุงููุนุจุฉ:', recentOrder.game);
    console.log('ุงูุฎุฏูุฉ:', recentOrder.service);
    console.log('ุงูุณุนุฑ:', recentOrder.price, 'ุฏููุงุฑ');
    console.log('ุญุงูุฉ ุงูุทูุจ:', recentOrder.status);
    console.log('ุชุงุฑูุฎ ุงูุทูุจ:', recentOrder.date);
    console.log('ุฑูู ุงูุฏูุนุฉ:', recentOrder.paymentId || 'ุบูุฑ ูุญุฏุฏ');
    
    // ูุญุต ุงูุฅุดุนุงุฑุงุช ููุฐุง ุงููุณุชุฎุฏู
    if (recentOrder.userId) {
      console.log('\n๐ ูุญุต ุงูุฅุดุนุงุฑุงุช ูููุณุชุฎุฏู:', recentOrder.userId);
      
      // ุงูุจุญุซ ุนู ุฅุดุนุงุฑุงุช ุชุฃููุฏ ุงูุฏูุน ููุฐุง ุงูุทูุจ ุงููุญุฏุฏ
      const orderNotifications = await prisma.notification.findMany({
        where: {
          userId: recentOrder.userId,
          type: 'payment-confirmed',
          data: {
            path: ['orderId'],
            equals: recentOrder.id
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      });
      
      console.log(`๐ฌ ุฅุดุนุงุฑุงุช ุชุฃููุฏ ุงูุฏูุน ููุฐุง ุงูุทูุจ: ${orderNotifications.length}`);
      
      if (orderNotifications.length === 0) {
        console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฅุดุนุงุฑ ุชุฃููุฏ ุฏูุน ููุฐุง ุงูุทูุจ!');
        
        // ุงูุชุญูู ูู ุญุงูุฉ ุงูุฏูุน
        if (recentOrder.status === 'pending' && recentOrder.paymentId) {
          console.log('\n๐ ุฅุฑุณุงู ุฅุดุนุงุฑ ุชุฃููุฏ ุงูุฏูุน ุงูููููุฏ...');
          
          try {
            await sendDatabaseNotification('payment-confirmed', {
              userId: recentOrder.userId,
              orderId: recentOrder.id,
              customerName: recentOrder.customerName,
              game: recentOrder.game,
              service: recentOrder.service,
              price: recentOrder.price,
              paymentMethod: 'Cryptomus (USDT)',
              timestamp: recentOrder.date.toISOString()
            });
            
            console.log('โ ุชู ุฅุฑุณุงู ุฅุดุนุงุฑ ุชุฃููุฏ ุงูุฏูุน ุจูุฌุงุญ!');
            console.log('๐ฑ ููููู ุงูุขู ูุฑุงุฌุนุฉ ุงูุฅุดุนุงุฑุงุช ูู ูููุนู');
            
          } catch (notificationError) {
            console.error('โ ุฎุทุฃ ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ:', notificationError.message);
          }
        } else if (recentOrder.status === 'pending' && !recentOrder.paymentId) {
          console.log('โณ ุงูุทูุจ ูุง ุฒุงู ูู ุงูุชุธุงุฑ ุงูุฏูุน');
          console.log('๐ก ูุฑุฌู ุฅููุงู ุนูููุฉ ุงูุฏูุน ุฃููุงู');
        } else {
          console.log('โน๏ธ ุญุงูุฉ ุงูุทูุจ:', recentOrder.status);
        }
        
      } else {
        console.log('โ ุชู ุงูุนุซูุฑ ุนูู ุฅุดุนุงุฑ ุชุฃููุฏ ุงูุฏูุน:');
        orderNotifications.forEach((notif, index) => {
          console.log(`${index + 1}. ุงูุนููุงู: ${notif.title}`);
          console.log(`   ุงูุฑุณุงูุฉ: ${notif.message}`);
          console.log(`   ุชุงุฑูุฎ ุงูุฅุฑุณุงู: ${notif.createdAt}`);
          console.log(`   ููุฑูุก: ${notif.read ? 'ูุนู' : 'ูุง'}`);
        });
        
        if (!orderNotifications[0].read) {
          console.log('\n๐ก ุงูุฅุดุนุงุฑ ููุฌูุฏ ููู ูู ุชุชู ูุฑุงุกุชู ุจุนุฏ');
          console.log('๐ฑ ูุฑุฌู ูุฑุงุฌุนุฉ ุงูุฅุดุนุงุฑุงุช ูู ูููุนู');
        }
      }
      
      // ุนุฑุถ ุฌููุน ุงูุฅุดุนุงุฑุงุช ุงูุฃุฎูุฑุฉ
      console.log('\n๐ ุฌููุน ุงูุฅุดุนุงุฑุงุช ุงูุฃุฎูุฑุฉ:');
      const allNotifications = await prisma.notification.findMany({
        where: {
          userId: recentOrder.userId
        },
        orderBy: {
          createdAt: 'desc'
        },
        take: 5
      });
      
      if (allNotifications.length === 0) {
        console.log('โ ูุง ุชูุฌุฏ ุฅุดุนุงุฑุงุช');
      } else {
        allNotifications.forEach((notif, index) => {
          console.log(`${index + 1}. ${notif.title} - ${notif.read ? 'โ ููุฑูุก' : '๐ ุฌุฏูุฏ'}`);
          console.log(`   ${notif.createdAt}`);
        });
      }
      
    } else {
      console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ูุนุฑู ุงููุณุชุฎุฏู ููุทูุจ!');
    }
    
    console.log('\n============================================');
    console.log('๐ ุฅุฐุง ููุช ุจุญุงุฌุฉ ููุณุงุนุฏุฉ ุฅุถุงููุฉุ ูุฑุฌู ุงูุชูุงุตู ูุนูุง');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkYourOrder();