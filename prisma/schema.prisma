generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  provider          String
  providerAccountId String
  userId            String
  type              String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ChatMessage {
  id          String   @id
  orderId     String
  userId      String
  message     String
  createdAt   DateTime @default(now())
  isSystem    Boolean  @default(false)
  imageUrl    String?
  messageType String   @default("text")
  isDelivered Boolean  @default(false)
  isRead      Boolean  @default(false)
  isPinned    Boolean  @default(false)
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [userId], references: [id])
}

model CustomPaymentRequest {
  id            String    @id
  customerEmail String
  description   String
  amount        Float
  status        String    @default("pending")
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  createdBy     String
  paidAt        DateTime?
  paymentMethod String?
  paymentId     String?
  User          User      @relation(fields: [createdBy], references: [id])
}

model DeletedPriceChange {
  id                String   @id
  originalId        String
  orderId           String
  oldPrice          Float
  newPrice          Float
  reason            String
  changedBy         String
  changedById       String?
  originalCreatedAt DateTime
  deletedAt         DateTime @default(now())
  deletedBy         String
  deletedById       String?
  deleteReason      String
  User              User?    @relation(fields: [deletedById], references: [id])
}

model Order {
  id                 String              @id
  userId             String
  customerName       String
  date               DateTime
  game               String
  price              Float
  service            String
  status             String
  notes              String?
  boosterId          String?
  boosterName        String?
  paymentId          String?             // Store payment gateway reference ID
  ChatMessage        ChatMessage[]
  User               User                @relation(fields: [userId], references: [id])
  Booster            User?               @relation("BoosterOrders", fields: [boosterId], references: [id])
  OrderDiscordHandle OrderDiscordHandle?
  OrderNote          OrderNote?
  PriceChange        PriceChange[]
  Invoice            Invoice?
}

model OrderDiscordHandle {
  id            String   @id
  orderId       String   @unique
  discordHandle String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User          User     @relation(fields: [userId], references: [id])
}

model PriceChange {
  id          String   @id
  orderId     String
  oldPrice    Float
  newPrice    Float
  reason      String
  changedBy   String
  changedById String?
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [changedById], references: [id])
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  userId       String
  expires      DateTime
  sessionToken String   @unique
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OrderNote {
  id          String   @id
  orderId     String   @unique
  boosterName String
  percentage  Int      @default(0)
  details     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  data      Json?
  userId    String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model User {
  id                   String                 @id
  email                String                 @unique
  name                 String?
  image                String?
  createdAt            DateTime               @default(now())
  emailVerified        DateTime?
  password             String?
  role                 String                 @default("user")
  username             String?
  verifyToken          String?
  resetToken           String?
  resetTokenExpiry     DateTime?
  accounts             Account[]
  ChatMessage          ChatMessage[]
  CustomPaymentRequest CustomPaymentRequest[]
  DeletedPriceChange   DeletedPriceChange[]
  Order                Order[]
  assignedOrders       Order[]                @relation("BoosterOrders")
  OrderDiscordHandle   OrderDiscordHandle[]
  PriceChange          PriceChange[]
  Session              Session[]
  Invoice              Invoice[]
  PaymentSession       PaymentSession[]
  notifications        Notification[]
}

model Invoice {
  id                String              @id @default(cuid())
  invoiceNumber     String              @unique
  orderId           String              @unique
  userId            String
  customerName      String
  customerEmail     String?
  issueDate         DateTime            @default(now())
  dueDate           DateTime?
  status            String              @default("issued") // issued, paid, cancelled
  subtotal          Float
  tax               Float               @default(0)
  total             Float
  currency          String              @default("USD")
  paymentMethod     String
  paymentGateway    String              // Cryptomus, Coinbase, etc.
  paymentId         String?             // Payment gateway transaction ID
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  Order             Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User              User                @relation(fields: [userId], references: [id])
  InvoiceItems      InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String   // Detailed service description
  game        String   // Game name
  service     String   // Service type
  quantity    Int      @default(1)
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())
  
  // Relations
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model PaymentSession {
  id              String   @id @default(cuid())
  orderId         String   @unique
  userId          String
  customerEmail   String
  game            String
  service         String
  serviceDetails  String?
  amount          Float
  currency        String   @default("USD")
  paymentProvider String   // Cryptomus, Coinbase, etc.
  paymentId       String?  // Payment gateway transaction ID
  status          String   @default("pending") // pending, completed, failed, expired
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
