// Production Prisma Schema for VPS Deployment
// Copy this to schema.prisma when deploying to production

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Changed from sqlite to postgresql for production
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  provider          String
  providerAccountId String
  userId            String
  type              String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ChatMessage {
  id          String   @id
  orderId     String
  userId      String
  message     String
  createdAt   DateTime @default(now())
  isSystem    Boolean  @default(false)
  imageUrl    String?
  messageType String   @default("text")
  isDelivered Boolean  @default(false)
  isRead      Boolean  @default(false)
  isPinned    Boolean  @default(false)
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [userId], references: [id])
}

model CustomPaymentRequest {
  id            String    @id
  customerEmail String
  description   String
  amount        Float
  status        String    @default("pending")
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String
  paidAt        DateTime?
  paymentMethod String?
  paymentId     String?
  User          User      @relation(fields: [createdBy], references: [id])
}

model DeletedPriceChange {
  id                String   @id
  originalId        String
  orderId           String
  oldPrice          Float
  newPrice          Float
  reason            String
  changedBy         String
  changedById       String?
  originalCreatedAt DateTime
  deletedAt         DateTime @default(now())
  deletedBy         String
  deletedById       String?
  deleteReason      String
  User              User?    @relation(fields: [deletedById], references: [id])
}

model Order {
  id                 String              @id
  userId             String
  customerName       String
  date               DateTime
  game               String
  price              Float
  service            String
  status             String
  notes              String?
  boosterId          String?
  boosterName        String?
  ChatMessage        ChatMessage[]
  User               User                @relation(fields: [userId], references: [id])
  Booster            User?               @relation("BoosterOrders", fields: [boosterId], references: [id])
  OrderDiscordHandle OrderDiscordHandle?
  OrderNote          OrderNote?
  PriceChange        PriceChange[]
}

model OrderDiscordHandle {
  id            String   @id
  orderId       String   @unique
  discordHandle String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  User          User     @relation(fields: [userId], references: [id])
}

model PriceChange {
  id          String   @id
  orderId     String
  oldPrice    Float
  newPrice    Float
  reason      String
  changedBy   String
  changedById String?
  createdAt   DateTime @default(now())
  User        User?    @relation(fields: [changedById], references: [id])
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  userId       String
  expires      DateTime
  sessionToken String   @unique
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderNote {
  id          String   @id
  orderId     String   @unique
  boosterName String
  percentage  Int      @default(0)
  details     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id
  email                String                 @unique
  name                 String?
  image                String?
  createdAt            DateTime               @default(now())
  emailVerified        DateTime?
  password             String?
  role                 String                 @default("user")
  username             String?
  verifyToken          String?
  accounts             Account[]
  ChatMessage          ChatMessage[]
  CustomPaymentRequest CustomPaymentRequest[]
  DeletedPriceChange   DeletedPriceChange[]
  Order                Order[]
  assignedOrders       Order[]                @relation("BoosterOrders")
  OrderDiscordHandle   OrderDiscordHandle[]
  PriceChange          PriceChange[]
  Session              Session[]
}