const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');
require('dotenv').config();

const prisma = new PrismaClient();

async function testDiscordLoginFlow() {
  console.log('๐ ุชุดุฎูุต ูุดููุฉ ุชุณุฌูู ุงูุฏุฎูู ุจุงูุฏูุณููุฑุฏ');
  console.log('=' .repeat(50));
  
  // 1. ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ
  console.log('\n1๏ธโฃ ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ:');
  console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL);
  console.log('DISCORD_CLIENT_ID:', process.env.DISCORD_CLIENT_ID ? 'โ ููุฌูุฏ' : 'โ ููููุฏ');
  console.log('DISCORD_CLIENT_SECRET:', process.env.DISCORD_CLIENT_SECRET ? 'โ ููุฌูุฏ' : 'โ ููููุฏ');
  console.log('NEXTAUTH_SECRET:', process.env.NEXTAUTH_SECRET ? 'โ ููุฌูุฏ' : 'โ ููููุฏ');
  
  // 2. ูุญุต ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช
  console.log('\n2๏ธโฃ ูุญุต ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
  try {
    await prisma.$connect();
    console.log('โ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงุฌุญ');
    
    // ุนุฏุฏ ุงููุณุชุฎุฏููู
    const userCount = await prisma.user.count();
    console.log(`๐ ุนุฏุฏ ุงููุณุชุฎุฏููู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${userCount}`);
  } catch (error) {
    console.log('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
  }
  
  // 3. ูุญุต endpoints ุงูุฎุงุตุฉ ุจู NextAuth
  console.log('\n3๏ธโฃ ูุญุต NextAuth endpoints:');
  const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';
  
  try {
    // ูุญุต providers
    const providersResponse = await fetch(`${baseUrl}/api/auth/providers`);
    if (providersResponse.ok) {
      const providers = await providersResponse.json();
      console.log('โ Providers endpoint ูุนูู');
      console.log('Discord Provider:', providers.discord ? 'โ ููุฌูุฏ' : 'โ ููููุฏ');
      if (providers.discord) {
        console.log('Discord Callback URL:', providers.discord.callbackUrl);
      }
    } else {
      console.log('โ ุฎุทุฃ ูู providers endpoint:', providersResponse.status);
    }
  } catch (error) {
    console.log('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจู providers endpoint:', error.message);
  }
  
  try {
    // ูุญุต session
    const sessionResponse = await fetch(`${baseUrl}/api/auth/session`);
    if (sessionResponse.ok) {
      const session = await sessionResponse.json();
      console.log('โ Session endpoint ูุนูู');
      console.log('Current Session:', session.user ? 'โ ูุณุฌู ุฏุฎูู' : 'โ ุบูุฑ ูุณุฌู ุฏุฎูู');
      if (session.user) {
        console.log('User Info:', {
          email: session.user.email,
          name: session.user.name,
          provider: session.user.provider || 'ุบูุฑ ูุญุฏุฏ'
        });
      }
    } else {
      console.log('โ ุฎุทุฃ ูู session endpoint:', sessionResponse.status);
    }
  } catch (error) {
    console.log('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจู session endpoint:', error.message);
  }
  
  // 4. ูุญุต ุฅุนุฏุงุฏุงุช ุงูููููุฒ
  console.log('\n4๏ธโฃ ูุญุต ุฅุนุฏุงุฏุงุช ุงูููููุฒ:');
  console.log('NODE_ENV:', process.env.NODE_ENV || 'development');
  console.log('Secure Cookies:', process.env.NODE_ENV === 'production' ? 'ููุนู' : 'ูุนุทู');
  
  // 5. ูุตุงุฆุญ ูุญู ุงููุดููุฉ
  console.log('\n5๏ธโฃ ูุตุงุฆุญ ูุญู ูุดููุฉ ุชุณุฌูู ุงูุฏุฎูู ุจุงูุฏูุณููุฑุฏ:');
  console.log('\n๐ง ุงูุฎุทูุงุช ุงููุทููุจุฉ:');
  console.log('1. ุชุฃูุฏ ูู ุฅุถุงูุฉ Redirect URI ูู Discord Developer Portal:');
  console.log('   - http://localhost:3000/api/auth/callback/discord (ููุชุทููุฑ ุงููุญูู)');
  console.log('   - https://gear-score.com/api/auth/callback/discord (ููุฅูุชุงุฌ)');
  console.log('\n2. ุชุฃูุฏ ูู ุฃู NEXTAUTH_URL ุตุญูุญ ูู ููู .env');
  console.log('\n3. ุชุฃูุฏ ูู ุฃู Discord Client ID ู Secret ุตุญูุญูู');
  console.log('\n4. ุงูุณุญ ุงูููููุฒ ูู ุงููุชุตูุญ ูุญุงูู ูุฑุฉ ุฃุฎุฑู');
  console.log('\n5. ุชุฃูุฏ ูู ุฃู ุงูุฅูููู ูู Discord ููุนู ููุฑุฆู');
  
  // 6. ูุญุต ุขุฎุฑ ุงููุณุชุฎุฏููู ุงููุณุฌููู
  console.log('\n6๏ธโฃ ุขุฎุฑ ุงููุณุชุฎุฏููู ุงููุณุฌููู:');
  try {
    const recentUsers = await prisma.user.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      select: {
        id: true,
        email: true,
        username: true,
        createdAt: true,
        image: true
      }
    });
    
    if (recentUsers.length > 0) {
      console.log('ุขุฎุฑ 5 ูุณุชุฎุฏููู:');
      recentUsers.forEach((user, index) => {
        console.log(`${index + 1}. ${user.email} - ${user.username || 'ุจุฏูู ุงุณู ูุณุชุฎุฏู'} - ${user.createdAt}`);
        console.log(`   ุงูุตูุฑุฉ: ${user.image ? 'ููุฌูุฏุฉ (Discord)' : 'ุบูุฑ ููุฌูุฏุฉ'}`);
      });
    } else {
      console.log('ูุง ููุฌุฏ ูุณุชุฎุฏููู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }
  } catch (error) {
    console.log('โ ุฎุทุฃ ูู ุฌูุจ ุงููุณุชุฎุฏููู:', error.message);
  }
  
  await prisma.$disconnect();
  console.log('\nโ ุงูุชูู ุงูุชุดุฎูุต');
}

// ุชุดุบูู ุงูุชุดุฎูุต
testDiscordLoginFlow().catch(console.error);